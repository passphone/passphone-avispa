role p(P, PT, T, PM : agent,
        Air, Initsend : symmetric_key,
        SND, RCV : channel(dy))
    played_by P def=
    local
        Step : nat,
        Protocol, IDt, Nt : text,
        X : message,
        Kppt : public_key
    init
        Step := 1
    transition
    1. Step = 1 /\ RCV(start)
        =|>
        % simmulate a valid rekeying ticket by creating Nt, IDt and Kppt
        Nt' := new()
        /\ Kppt' := new()
        % Build message X with Nt and Kppt signed by T
        /\ X' := {Protocol.IDt.Nt'.Kppt'}_T
        % Send Nt and Kppt to T to simmulate valid values
        /\ SND({Nt'.Kppt'}_Initsend)
        % Send X to PT over the air
        /\ SND({X'}_Air)
        /\ Step' := 6
end role

role pt(P, PT, T, PM : agent,
        Air, TlStpt : symmetric_key,
        SND, RCV : channel(dy))
    played_by PT def=
    local
        Step : nat,
        Nt, IDt, IDpt, Protocol : text,
        Hash : hash_func,
        X : message,
        Kppt : public_key,
        K : symmetric_key
    init Step := 1
    transition
    % Receive X from P over the air
    1. Step = 1 /\ RCV({X'}_Air)
        =|>
        Step' := 2
        % Build a new key Kppt
        /\ Kppt' := new()
        % Send the new Kppt and X to T
        /\ SND({{Protocol.Step'.Kppt'.X'}_PT}_TlStpt)
        % Make sure that the new Kppt is authentic
        /\ witness(PT,T,kppt_pt_t,Kppt')
        /\ Step' := 3
    3. Step = 3 /\ RCV({{Protocol.Step'.IDt.IDpt'.K'}_T}_TlStpt)
        =|>
        request(PT,T,idpt_t_pt,IDpt')
        /\ Step' := 6
end role

role pm(P, PT, T, PM : agent,
        SND, RCV : channel(dy))
    played_by PM def=
    local
        Step : nat,
        Protocol, IDt, Nt, Nttrans : text,
        Kppt : public_key,
        K : symmetric_key
    init Step := 4
    transition
    4. Step = 4 /\ RCV({{Protocol.IDt.Nt'.Kppt}_T}_K')
        =|>
        Step' := 5
    5. Step = 5 /\ RCV({{Protocol.IDt.Nttrans'.Kppt}_T}_K')
        =|>
        Step' := 6
end role

role t(P, PT, T, PM : agent,
        TlStpt, Initsend : symmetric_key,
        SND, RCV : channel(dy))
    played_by T def=
    local
        Step : nat,
        X : message,
        Hash : hash_func,
        Kppt, Tmp : public_key,
        Protocol, IDt, IDpt, Nt, Nttrans : text,
        K : symmetric_key
    init
        Step := 1
    transition
    % Receive initial informations from P
    1. Step = 1 /\ RCV({Nt'.Kppt'}_Initsend)
        =|>
        Tmp' := Kppt'
        /\ Step' := 2
    % Receive message from PT with X and a new Kppt
    2. Step = 2 /\ RCV({{Protocol.Step'.Kppt'.X'}_PT}_TlStpt)
        =|>
        % Make sure that Kppt was authentic
        request(T,PT,kppt_pt_t,Kppt')
        % Generate a new nonce Nt
        /\ Nt' := new()
        % Hash this Nt to get IDpt
        /\ IDpt' := Hash(Nt')
        % Make sure that the new IDpt is authentic
        /\ witness(T,PT,idpt_t_pt,IDpt')
        /\ Step' := 3
        % Build a new key K
        /\ K' := new()
        % Make sure that K is kept secret between PT and T
        /\ secret(K',k,{PT,T})
        % Send IDpt and K to PT
        /\ SND({{Protocol.Step'.IDt.IDpt'.K'}_T}_TlStpt)
        
        % -- Rekeying and transfer ticket--
        /\ Step' := 1
        % Build a new nonce Nt for the rekeying ticket
        /\ Nt' := new()
        % Send the message with the rekeying ticket to PM
        /\ SND({{Protocol.IDt.Nt'.Kppt'}_T}_K')
        % Build a nonce Nttrans for the transfer ticket
        % (Identifier is Nttrans so that PM can separate the two ticket nonces)
        /\ Nttrans' := new()
        %% Send the message with the transfer ticket to PM
        /\ SND({{Protocol.IDt.Nttrans'.Kppt'}_T}_K')
        /\ Step' := 6
end role

role session(P, PT, T, PM : agent,
            TlStpt, Air, Initsend : symmetric_key)
    def=
    local
        SP, RP, SPT, RPT, ST, RT, SPM, RPM : channel(dy)
    composition
    p(P,PT,T,PM,Air,Initsend,SP,RP)
    /\ pt(P,PT,T,PM,Air,TlStpt,SPT,RPT)
    /\ t(P,PT,T,PM,TlStpt,Initsend,ST,RT)
    /\ pm(P,PT,T,PM,SPM,RPM)
end role

role enviroment()
    def=
    const
        idpt_t_pt, k, kppt_pt_t : protocol_id,
        p, pt, t, pm : agent,
        tlstpt, air, initsend : symmetric_key
    intruder_knowledge = {p, pt, t, pm}
    composition
    session(p,pt,t,pm,tlstpt,air,initsend)
    %/\ session(i,pt,t,pm,tlstpt,air,initsend)
end role

goal
    authentication_on idpt_t_pt
    authentication_on kppt_pt_t
    secrecy_of k
end goal

enviroment()
