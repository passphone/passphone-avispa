role ps(    PS, PM, S, T : agent,
            TLSsps, TLStps : symmetric_key,
            SND, RCV : channel(dy))
    played_by PS def=
    local
        Step : nat,
        Protocol, Hpt, Ns, Hs, Nt : text,
        IDs, IDps, IDt, IDpt : text,
        X, Y : message,
        Hash : hash_func
    init Step := 1
    transition
        1. Step = 1 /\ RCV({{Protocol.Step.IDs.Hpt.Ns'}_S}_TLSsps)
            =|>
            request(PS,S,ns_s_ps,Ns')
            /\ Hs' := Hash(Ns'.IDs)
            /\ witness(PS,T,hs_ps_t,Hs')
            /\ Step' := 2
            /\ SND({{Protocol.Step'.IDps.Hpt.Hs'}_PS}_TLStps)
            /\ Step' := 3
        3. Step = 3 /\ RCV({X'}_TLStps)
            =|>
            Step' := 21
            /\ SND(Protocol.Step'.IDps.X')
            /\ Step' := 22
end role

role pm(    PS, PM, S, T : agent,
            TLStpt : symmetric_key,
            SND, RCV : channel(dy))
    played_by PM def=
    local
        Step : nat,
        Protocol, Hpt, Ns, Hs, Nt : text,
        IDs, IDps, IDt, IDpm : text,
        X, Y : message
    init Step := 4
    transition

end role

role s(     PS, PM, S, T : agent,
            TLSsps : symmetric_key,
            SND, RCV : channel(dy))
    played_by S def=
    local
        Step : nat,
        Protocol, Hpt, Ns, Hs, Nt : text,
        IDs, IDps, IDt, IDpm : text,
        X, Y : message,
        Hash : hash_func
    init Step := 1
    transition
        1. Step = 1 /\ RCV(start)
            =|>
            Ns' := new()
            /\ Hs' := Hash(Ns'.IDs)
            /\ witness(S,PS,ns_s_ps,Ns')
            /\ SND({{Protocol.Step.IDs.Hpt.Ns'}_S}_TLSsps)
            /\ Step' := 7
end role

role t(     PS, PM, S, T : agent,
            TLStpt, TLStps : symmetric_key,
            SND, RCV : channel(dy))
    played_by T def=
    local
        Step : nat,
        Protocol, Hpt, Ns, Hs, Nt : text,
        IDs, IDps, IDt, IDpm : text,
        X, Y : message
    init Step := 2
    transition
        2. Step = 2 /\ RCV({{Protocol.Step'.IDps.Hpt.Hs'}_PS}_TLStps)
            =|>
            request(T,PS,hs_ps_t,Hs')
            /\ Nt' := new()
            /\ Step' := 3
            /\ X' := {Protocol.Step'.IDt.Hpt.Hs'.Nt'}_T
            /\ SND({X'}_TLStps)
            /\ Step' := 21
        21. Step = 21 /\ RCV(Protocol.Step'.IDps.X')
            =|>
            Step' := 22
            /\ SND({Protocol.Step'.IDt.X}_T)
        
end role

role session(   S, PS, T, PM : agent,
                TLSsps, TLStps, TLStpt : symmetric_key)
    def=
    local
        SS, RS, SPS, RPS, ST, RT, SPM, RPM : channel(dy)
    composition
    s(PS, PM, S, T, TLSsps, SS, RS)
    /\ ps(PS, PM, S, T, TLSsps, TLStps, SPS, RPS)
    /\ t(PS, PM, S, T,TLStpt, TLStps, ST, RT)
    /\ pm(PS, PM, S, T, TLStpt, SPM, RPM)
end role

role enviroment()
    def=
    const
        ns_s_ps, 
        hs_ps_t, 
        ns_ps_pt,
        ids_ps_pt, 
        x_ps_pt,
        nt_t_pt 
            : protocol_id,
        tlssps, tlstps, tlstpt, air : symmetric_key,
        s, ps, t, pm : agent
    intruder_knowledge = {s, ps, t, pm}
    composition
        session(s,ps,t,pm,tlssps,tlstps,tlstpt)
        /\ session(i,ps,t,pm,tlssps,tlstps,tlstpt)
        %/\ session(s,ps,i,pt,tlssps,tlstps,tlstpt,air)
        %/\ session(s,i,t,pt,tlssps,tlstps,tlstpt,air)
        %/\ session(s,ps,t,i,tlssps,tlstps,tlstpt,air)
        %/\ session(s,i,t,i,tlssps,tlstps,tlstpt,air)
end role


goal
    authentication_on ns_s_ps
    authentication_on hs_ps_t
    authentication_on ns_ps_pt
    authentication_on ids_ps_pt
    authentication_on x_ps_pt
    authentication_on nt_t_pt
end goal

enviroment()
