% --- Bootstrapping PT ---

role pt(    PT, T, PM : agent,
            SND, RCV : channel(dy),
            TLS, Air : symmetric_key)
    played_by PT def=
    local
        Step : nat,
        IDpm, IDpt, IDt, Nt, Protocol, Kppt : text,
        K : symmetric_key,
        X : message
    init Step := 1
    transition
    1. Step = 1 /\ RCV(start)
        =|>
        % Simulate a new IDpm
        IDpm' := new()
        % Generate a new key
        /\ Kppt' := new()
        % Make sure that the new key and the new IDpm are authentic
        /\ witness(PT,T,kppt_pt_t,Kppt')
        /\ witness(PT,T,idpm_step_one,IDpm')
        % Send message to T
        /\ SND({Protocol.Step.IDpt.Kppt'.IDpm'}_PT)
        /\ Step' := 3
    % Receive the message X from PM over the air
    3. Step = 3 /\ RCV({X'}_Air)
        =|>
        % Send the received X to T
        SND({{Protocol.Step.IDpt.X'}_PT}_TLS)
        /\ Step' := 5
    5. Step = 5 /\ RCV({{Protocol.Step.IDt.IDpt'.K'}_T}_TLS)
        =|>
        % make sure that received idpt and K were authentic
        request(PT,T,idpt_t_pt,IDpt')
        /\ request(PT,T,k_t_pt,K')
        /\ Step' := 6
end role

role t(     PT, T, PM : agent,
            SND, RCV : channel(dy),
            TLS : symmetric_key)
    played_by T def=
    local
        Step : nat,
        IDpm, IDpt, IDt, Nt, Nttrans, Protocol, Tmp, Kppt : text,
        K : symmetric_key,
        X : message,
        Hash : hash_func
    init Step := 1
    transition
    % Receive the message from T
    1. Step = 1 /\ RCV({Protocol.Step.IDpt.Kppt'.IDpm'}_PT)
        =|>
        % Build a new nonce Nt
        Nt' := new()
        % Make sure that received key and IDpm were authentic
        /\ request(T,PT,kppt_pt_t,Kppt')
        /\ request(T,PT,idpm_step_one,IDpm')
        /\ Step' := 2
        % Build message X
        /\ X' := {Protocol.Step'.IDt.Nt'}_T
        % Send the message X to PM
        /\ SND(X')
        % Make sure that the new Nt is authentic
        /\ witness(T,T,nt_t_t,Nt')
        /\ Step' := 3
    % Receive the message with X from PT and check if Nt in X is the Nt created by T
    3. Step = 3 /\ RCV({{Protocol.Step.IDpt.X'}_PT}_TLS) /\ X'(Nt) = Nt
        =|>
        % Make sure that the received Nt was authentic (a second check)
        request(T,T,nt_t_t, X'(Nt))
        % Create a new nonce and a new key K (the pin)
        /\ Nt' := new()
        /\ K' := new()
        % Make sure that this new K can only be known by PT and T
        /\ secret(K',k,{PT,T})
        % Hash the nonce Nt as IDpt
        /\ IDpt' := Hash(Nt')
        % Send the message with the new IDpt and K to PT
        /\ SND({{Protocol.Step.IDt.IDpt'.K'}_T}_TLS)
        % Make sure that the IDpt and K are authentic
        /\ witness(T,PT,idpt_t_pt,IDpt')
        /\ witness(T,PT,k_t_pt,K')
        
        % -- Rekeying and transfer ticket--
        % Build a new nonce Nt for the rekeying ticket
        /\ Nt' := new()
        /\ Step' := 1
        % Send the message with the rekeying ticket to PM
        /\ SND({{Protocol.Step'.IDt.Nt'.Kppt}_T}_K')
        % Build a nonce Nttrans for the transfer ticket
        % (Identifier is Nttrans so that PM can separate the two ticket nonces)
        /\ Nttrans' := new()
        % Send the message with the transfer ticket to PM
        /\ SND({{Protocol.Step'.IDt.Nttrans'.Kppt}_T}_K')
        /\ Step' := 6
end role

role pm(    PT, T, PM : agent,
            SND, RCV : channel(dy),
            Air : symmetric_key)
    played_by PM def=
    local
        Step : nat,
        Protocol, IDt, Nt, Kppt, Nttrans : text,
        K : symmetric_key,
        X : message
    init Step := 2
    transition
    % Receive the message X
    2. Step = 2 /\ RCV(X')
        =|>
        % Send the message X over the air to PT
        SND({X'}_Air) /\
        Step' := 5
    % Receive the rekeying ticket
    5. Step = 5 /\ RCV({{Protocol.Step'.IDt.Nt'.Kppt}_T}_K')
        =|>
        Step' := 6
    % Receive the transfer ticket
    6. Step = 6 /\ RCV({{Protocol.Step'.IDt.Nttrans'.Kppt}_T}_K')
        =|>
        Step' := 7
end role

role session(   PT, T, PM : agent,
                TLS, Air : symmetric_key)
    def=
    local
        SPT, RPT, ST, RT, SPM, RPM : channel(dy)
    composition
    % instantiate all roles
    pt(PT,T,PM,SPT,RPT,TLS, Air) /\ t(PT,T,PM,ST,RT,TLS) /\ pm(PT,T,PM,SPM,RPM, Air)
end role

role enviroment()
    def=
    const
        idpm_step_one, nt_t_t, idpt_t_pt, kppt_pt_t, k_t_pt, k : protocol_id,
        tls, air : symmetric_key,
        pt, t, pm : agent
    % Intruder only has knowledge of the involved roles
    intruder_knowledge = {pt, pm, t}
    composition
    session(pt,t,pm,tls,air)
    % Intruder fakes to be PT
    /\ session(i,t,pm,tls,air)
    % Intruder fakes to be PT and PM
    /\ session(i,t,i,tls,air)
end role

goal
    % Check the privacy of K
    % Check the authenticy of IDpm, Nt, IDpt, Kppt and K
    secrecy_of k
    authentication_on idpm_step_one
    authentication_on nt_t_t
    authentication_on idpt_t_pt
    authentication_on kppt_pt_t
    authentication_on k_t_pt
end goal

enviroment()
