%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Passphone
%% Protocol: Bootstrapping PT
%% Involved Paries: PT, T, PM
%%
%% 1. PT -> T  TLS((Protocol,1,0,KpPT,IDpm)_PT)
%% 2. T  -> PM    (Protocol,2,IDt,Nt)_T = X
%% 3. PM -> PT    X
%% 4. PT -> T  TLS((Protocol,3,0,X)_PT)
%% 5. T  -> PT TLS((Protocol,4,IDt,IDpt,K)_T)
%% 6. T  -> PM E_K((Rekey,1,IDt,Nt',KpPT)_T)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role pt(	PT, T, PM : agent,
			SND, RCV : channel(dy),
			K_PT_T, Air : symmetric_key,
			IDt : text,
			Protocol : text)
	played_by PT def=
	local
		Step : nat,
		Kpt : public_key,
		IDpm : text,
		Nt : text,
		X : message,
		IDpt : text,
		K : symmetric_key
		init Step := 0
	transition
		0. Step  = 0 /\ RCV(start) =|>
		   Step':= 3 /\ Kpt' := new()
		   			 /\ IDpm':= new()
		   			 /\ SND({{Protocol.1.0.Kpt'.IDpm'}_PT}_K_PT_T)
		   			 /\ witness(PT,T,kptPTT,Kpt')
		   			 /\ witness(PT,T,idpmPTT,IDpm')
	 	3. Step  = 3 /\ RCV({X'}_Air) =|>
		   Step':= 5 /\ SND({{Protocol.3.0.X'}_PT}_K_PT_T)
	   	5. Step  = 5 /\ RCV({{Protocol.4.IDt.IDpt'.K'}_T}_K_PT_T) =|>
		   Step':= 7 /\ request(PT,T,idptTPT,IDpt')
end role

role t(		PT, T, PM : agent,
			SND, RCV : channel(dy),
			K_PT_T : symmetric_key,
			IDt : text,
			Protocol, Rekey : text,
			H : hash_func,
			Tmp : symmetric_key)
	played_by T def=
	local
		Step : nat,
		IDpt : text,
		IDpm : text,
		Kpt : public_key,
		Nt : text,
		K : symmetric_key,
		X : message
		init Step := 1
	transition
		1. Step  = 1 /\ RCV({{Protocol.1.0.Kpt'.IDpm'}_PT}_K_PT_T) =|>
		   Step':= 4 /\ Nt' := new()
		   			 /\ X'  := {Protocol.2.IDt.Nt'}_T
		   			 /\ SND({X'}_Tmp)
		   			 /\ request(T,PT,kptPTT,Kpt')
		   			 /\ request(T,PT,idpmPTT,IDpm')
		   			 /\ witness(T,T,ntTT,Nt')
	 	4. Step  = 4 /\ RCV({{Protocol.3.0.X'}_PT}_K_PT_T) =|>
 		   Step':= 7 /\ request(T,T,ntTT,Nt')
 		   			 /\ Nt' := new()
 		   			 /\ IDpt' := H(Nt')
 		   			 /\ K' := new()
 		   			 /\ SND({{Protocol.4.IDt.IDpt'.K'}_T}_K_PT_T)
 		   			 /\ SND({{Rekey.1.IDt.Nt'.Kpt}_T}_K')
 		   			 /\ secret(K,kTPT,{T,PT})
 		   			 /\ witness(T,PT,idptTPT,IDpt')
 		   			 /\ witness(T,PM,ntTPM,Nt')
end role

role pm(	PT, T, PM : agent,
			SND, RCV : channel(dy),
			Air : symmetric_key,
			IDt : text,
			Protocol, Rekey : text,
			Tmp : symmetric_key)
	played_by PM def=
	local
		Step : nat,
		Nt : text,
		X : message,
		Kpt : public_key,
		K : symmetric_key
		init Step := 2
	transition
		2. Step  = 2 /\ RCV({X'}_Tmp) =|>
		   Step':= 6 /\ SND({X'}_Air)
	   	6. Step  = 6 /\ RCV({{Rekey.1.IDt.Nt'.Kpt'}_T}_K') =|>
	   	   Step':= 7 /\ request(PM,T,ntTPM,Nt')
end role

role session(	PT, T, PM : agent,
				H : hash_func,
				Protocol, Rekey : text)
	def=
	local
		SPT, RPT, ST, RT, SPM, RPM : channel(dy),
		IDt : text,
		K_PT_T, Air,Tmp : symmetric_key
	composition
		   pt(PT,T,PM,SPT,RPT,K_PT_T,Air,IDt,Protocol)
		/\ t (PT,T,PM,ST, RT, K_PT_T,IDt,Protocol,Rekey,H,Tmp)
		/\ pm(PT,T,PM,SPM,RPM,Air,IDt,Protocol,Rekey,Tmp)
end role

role environment()
	def=
	const
		pt, t, pm : agent,
		h : hash_func,
		protocol, rekey : text,
		kptPTT, idpmPTT, ntTT, kTPT, idptTPT, ntTPM : protocol_id
	intruder_knowledge = {pt,t,pm,h,protocol,rekey}
	composition
		   session(pt,t,pm,h,protocol,rekey)
		%/\ session(i,t,pm,h,protocol,rekey)
		%/\ session(i,t,i,h,protocol,rekey)
end role

goal
	authentication_on kptPTT
	authentication_on idpmPTT
	authentication_on ntTT
	secrecy_of kTPT
	authentication_on idptTPT
	authentication_on ntTPM

end goal

environment()