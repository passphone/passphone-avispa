%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Passphone
%% Author: AndrÃ© Karge (andre.karge@uni-weimar.de)
%% Protocol: Authentication
%% Involved Paries: S, PS, T, PS
%%
%% 1. S  -> PS TLS(Protocol,1,IDs,Hpt,Ns)
%% 2. PS -> T  TLS(Protocol,2,1,Hpt,Hs)
%% 3. T  -> PS TLS((Protocol,3,IDt,Hpt,Nt)_T) = X
%% 4. PS -> PT    (Protocol,4,1,X,Ns,IDs)
%% 5. PT -> T  TLS((Protocol,5,IDpt,X)_PT)
%% 6. T  -> PS TLS((Protocol,6,IDt,Hpt,Hs)_T) = Y
%% 7. PS -> S  TLS(Protocol,7,1,Y)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role s(		S, PS, T, PT : agent,
			SND, RCV : channel(dy),
			K_S_PS : symmetric_key,
			IDs, IDt, IDpt : text,
			Protocol : text,
			Hpt : text,
			H : hash_func)
	played_by S def=
	local
		Step : nat,
		Ns, Hs : text,
		Y, X : message
		init Step := 0
	transition
		0. Step  = 0 /\ RCV(start) =|>
		   Step':= 7 /\ Ns' := new()
		   			 /\ SND({Protocol.1.IDs.Hpt.Ns'}_K_S_PS)
		   			 /\ Hs' := H(Ns'.IDs)
		   			 /\ witness(S,PS,nsSPS,Ns')
		   			 /\ witness(S,S,hsSS,Hs')
	 	7. Step  = 7 /\ RCV({Protocol.7.1.Y'}_K_S_PS) =|>
 		   Step':= 8 /\ request(S,S,hsSS,Y'(Hs))
end role

role ps(	S, PS, T, PT : agent,
			SND, RCV : channel(dy),
			K_S_PS, K_T_PS, Air : symmetric_key,
			IDs, IDt, IDpt : text,
			Protocol : text,
			Hpt : text,
			H : hash_func)
	played_by PS def=
	local
		Step : nat,
		Ns, Nt, Hs : text,
		Y, X : message
		init Step := 1
	transition
		1. Step  = 1 /\ RCV({Protocol.1.IDs.Hpt.Ns'}_K_S_PS) =|>
		   Step':= 3 /\ Hs' := H(Ns'.IDs)
		   			 /\ SND({Protocol.2.1.Hpt.Hs'}_K_T_PS)
		   			 /\ request(PS,S,nsSPS,Ns')
		   			 /\ witness(PS,T,hsPST,Hs')
	 	3. Step  = 3 /\ RCV({X'}_K_T_PS) =|>
	 	   Step':= 6 /\ SND({Protocol.4.1.X'.Ns.IDs}_Air)
	 	   			 /\ request(PS,T,ntTPS,X'(Nt))
	 	   			 /\ witness(PS,PT,nsPSPT,Ns)
 	   	6. Step  = 6 /\ RCV({Y'}_K_T_PS) =|>
	   	   Step':= 8 /\ SND({Protocol.7.1.Y'}_K_S_PS)
end role

role t(		S, PS, T, PT : agent,
			SND, RCV : channel(dy),
			K_T_PS, K_T_PT : symmetric_key,
			IDs, IDt, IDpt : text,
			Protocol : text,
			Hpt : text)
	played_by T def=
	local
		Step : nat,
		Hs, Nt : text,
		Y, X : message
		init Step := 2
	transition
		2. Step  = 2 /\ RCV({Protocol.2.1.Hpt.Hs'}_K_T_PS) =|>
		   Step':= 5 /\ Nt' := new()
		   			 /\ X'  := {Protocol.3.IDt.Hpt.Hs'.Nt'}_T
		   			 /\ SND({X'}_K_T_PS)
		   			 /\ request(T,PS,hsPST,Hs')
		   			 /\ witness(T,PS,ntTPS,Nt')
		   			 /\ witness(T,PT,ntTPT,Nt')
		   			 /\ witness(T,T,ntTT,Nt')
	 	5. Step  = 5 /\ RCV({{Protocol.5.IDpt.X'}_PT}_K_T_PT) =|>
	 	   Step':= 8 /\ Y' := {Protocol.6.IDt.Hpt.Hs}_T
	 	   			 /\ SND({Y'}_K_T_PS)
	 	   			 /\ request(T,T,ntTT,Y'(Nt))
end role

role pt(	S, PS, T, PT : agent,
			SND, RCV : channel(dy),
			K_T_PT, Air : symmetric_key,
			IDs, IDt, IDpt : text,
			Protocol : text,
			Hpt : text)
	played_by PT def=
	local
		Step : nat,
		Hs, Nt, Ns : text,
		X : message
		init Step := 4
	transition
		4. Step  = 4 /\ RCV({Protocol.4.1.X'.Ns'.IDs}_Air) =|>
		   Step':= 8 /\ SND({{Protocol.5.IDpt.X'}_PT}_K_T_PT)
		   			 /\ request(PT,T,ntTPT,X'(Nt))
		   			 /\ request(PT,T,nsPSPT,Ns')
end role

role session(	S, PS, T, PT : agent,
				H : hash_func,
				Protocol : text)
	def=
	local
		SS, RS, SPS, RPS, ST, RT, SPT, RPT : channel(dy),
		IDs, IDps, IDt, IDpt : text,
		K_S_PS, K_T_PS, K_T_PT, Air : symmetric_key,
		Hpt : text
	composition
		   s (S,PS,T,PT,SS, RS, K_S_PS,           IDs,IDt,IDpt,Protocol,Hpt,H)
		/\ ps(S,PS,T,PT,SPS,RPS,K_S_PS,K_T_PS,Air,IDs,IDt,IDpt,Protocol,Hpt,H)
		/\ t (S,PS,T,PT,ST, RT, K_T_PS,K_T_PT,    IDs,IDt,IDpt,Protocol,Hpt)
		/\ pt(S,PS,T,PT,SPT,RPT,K_T_PT,Air,       IDs,IDt,IDpt,Protocol,Hpt)
end role

role environment()
	def=
	const
		s, ps, t, pt : agent,
		h : hash_func,
		protocol : text,
		nsSPS, hsSS, hsPST, ntTPS, ntTPT, nsPSPT, ntTT : protocol_id
	intruder_knowledge = {s,ps,t,pt,h,protocol}
	composition
		   session(s,ps,t,pt,h,protocol)
		/\ session(i,ps,t,pt,h,protocol)
		/\ session(s,i, t,pt,h,protocol)
		/\ session(s,ps,t,i, h,protocol)
end role

goal
	%authentication_on nsSPS
	authentication_on hsSS
	authentication_on hsPST
	authentication_on ntTPS
	authentication_on ntTPT
	authentication_on nsPSPT
	authentication_on ntTT
end goal

environment()