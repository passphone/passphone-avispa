role ps(PS, PT, T, S : agent,
        TLSsps, TLStps, Air : symmetric_key,
        SND, RCV : channel(dy),
        H : hash_func)
    played_by PS def=
    local
        Step : nat,
        Protocol, Hpt, Ns, Hs, Nt, IDs, IDps, IDt : text,
        X, Y : message
    init Step := 1
    transition
      2. Step  = 1 /\ RCV({Protocol.IDs'.Hpt'.Ns'}_TLSsps) =|>
         Step':= 3 /\ Hs':= H(Ns'.IDs')
                   /\ IDps':= new()
                   /\ SND({Protocol.IDps'.Hpt'.Hs'}_TLStps)
      4. Step  = 3 /\ RCV({X'}_TLStps) =|>
         Step':= 6 /\ SND({Protocol.IDps.X'.IDs.Ns}_Air)
      7. Step  = 6 /\ RCV({Y'}_TLStps) =|>
         Step':= 8 /\ SND({Protocol.IDps.Y'}_TLSsps)
                   /\ witness(PS,S,test,Y'(Hs))
end role

role pt(PS, PT, T, S : agent,
        TLStpt, Air : symmetric_key,
        SND, RCV : channel(dy))
    played_by PT def=
    local
        Step : nat,
        Protocol, Ns, Hpt, Hs, Nt, IDs, IDt, IDps, IDpt : text,
        X : message
    init Step := 4
    transition
      5. Step  = 4 /\ RCV({Protocol.IDps'.X'.IDs'.Ns'}_Air) =|>
         Step':= 8 /\ IDpt':= new()
                   /\ SND({{Protocol.IDpt'.X'}_PT}_TLStpt)
                   /\ request(PT,S,hsStoPT,X'(Hs))
                   /\ request(PT,T,ntTtoPT,X'(Nt))
end role

role t (PS, PT, T, S : agent,
        TLStps, TLStpt : symmetric_key,
        SND, RCV : channel(dy))
    played_by T def=
    local
        Step : nat,
        Protocol, Hpt, Hs, Nt, IDt, IDps, IDpt : text,
        X, Y : message
    init Step := 2
    transition
      3. Step  = 2 /\ RCV({Protocol.IDps'.Hpt'.Hs'}_TLStps) =|>
         Step':= 5 /\ Nt' := new()
                   /\ IDt':= new()
                   /\ X'  := {Protocol.IDt'.Hpt'.Hs'.Nt'}_T
                   /\ SND({X'}_TLStps)
                   /\ request(T,S,hsStoT,Hs')
                   /\ witness(T,PT,ntTtoPT,Nt')
      6. Step  = 5 /\ RCV({{Protocol.IDpt'.X'}_PT}_TLStpt) =|>
         Step':= 8 /\ Y' :=({Protocol.IDt.Hpt.Hs}_T)
                   /\ SND({Y'}_TLStps)
end role

role s (PS, PT, T, S : agent,
        TLSsps : symmetric_key,
        SND, RCV : channel(dy),
        H : hash_func)
    played_by S def=
    local
        Step : nat,
        Protocol, Hpt, Ns, Hs, IDs, IDps, IDt : text,
        Y : message
    init Step := 0
    transition
      1. Step  = 0 /\ RCV(start) =|>
         Step':= 7 /\ Hpt':= new()
                   /\ IDs':= new()
                   /\ Ns' := new()
                   /\ Hs' := H(Ns'.IDs')
                   /\ SND({Protocol.IDs'.Hpt'.Ns'}_TLSsps)
                   /\ witness(S,T,hsStoT,Hs')
                   /\ witness(S,PT,hsStoPT,Hs')
      8. Step  = 7 /\ RCV({Protocol.IDps.Y'}_TLSsps) =|>
         Step':= 8 /\ request(S,PS,test,Y'(Hs))
end role

role session(PS, PT, T, S : agent,
             TLSsps,TLStps,TLStpt,Air : symmetric_key,
             H : hash_func)
    def=
    local
        SS, RS, SPS, RPS, ST, RT, SPT, RPT : channel(dy)
    composition
    s (PS, PT, T, S, TLSsps, SS, RS, H) /\ 
    ps(PS, PT, T, S, TLSsps, TLStps, Air, SPS, RPS, H) /\ 
    t (PS, PT, T, S, TLStps, TLStpt, ST, RT) /\ 
    pt(PS, PT, T, S, TLStpt, Air, SPT, RPT)
end role

role enviroment()
    def=
    const
        ps, pt, t, s : agent,
        tlssps, tlstps, tlstpt, air : symmetric_key,
        h : hash_func,
        hsStoT, hsStoPT, ntTtoPT, test : protocol_id
        
    intruder_knowledge = {ps, pt, t, s, h}
    composition
    session(ps,pt,t,s,tlssps,tlstps,tlstpt,air,h)
end role

goal
    authentication_on hsStoT
    authentication_on hsStoPT
    authentication_on ntTtoPT
    authentication_on test
end goal

enviroment()
