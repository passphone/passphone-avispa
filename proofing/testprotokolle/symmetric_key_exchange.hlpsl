
role alice( A, B : agent,
            SND, RCV : channel(dy),
            K : symmetric_key,
            Hash : hash_func)
    played_by A def=
    local
        State : nat,
        Na, Nb : text,
        K1 : message
    init State := 0
    transition
    0. State = 0 /\ RCV(start)
        =|>
        State' := 2 /\
        Na' := new() /\
        SND({Na'}_K)
    2. State = 2 /\ RCV({Nb'}_K)
        =|>
        State' := 4 /\
        K1' := Hash(Na.Nb') /\
        SND({Nb'}_K1')
        %SND({Nb'}_K) % unsafe!!
        /\ witness(A,B,bob_alice_nb,Nb')
end role

role bob(   A, B :agent,
            SND, RCV : channel(dy),
            K : symmetric_key,
            Hash : hash_func)
    played_by B def=
    local
        State : nat,
        Na, Nb : text,
        K1 : message
    init State := 1
    transition
    1. State = 1 /\ RCV({Na'}_K)
        =|>
        State' := 3 /\
        Nb' := new() /\
        SND({Nb'}_K) /\
        K1' := Hash(Na'.Nb')
        /\ secret(K1',k1,{A,B})
    3. State = 3 /\ RCV({Nb'}_K1)
    %3. State = 3 /\ RCV({Nb'}_K) % unsafe!!
        =|>
        State' := 5
        /\ request(B,A,bob_alice_nb,Nb)
end role

role session(   A, B : agent,
                K : symmetric_key,
                Hash : hash_func)
    def=
    local
        SA, RA, SB, RB : channel(dy)
    composition
    alice(A,B,SA,RA,K,Hash) /\ bob(A,B,SB,RB,K,Hash)
end role

role enviroment()
    def=
    const
        bob_alice_nb, k1 : protocol_id,
        kab, kai, kib : symmetric_key,
        a,b : agent,
        h : hash_func
    intruder_knowledge = {a,b,h,kai,kib}
    composition
    session(a,b,kab,h) /\ session(a,i,kai,h) /\ session(i,b,kib,h)
end role

goal
    secrecy_of k1
    authentication_on bob_alice_nb
end goal

enviroment()
